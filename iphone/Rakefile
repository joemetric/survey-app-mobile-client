$silent_test = false

desc "Run unit tests"
task :test do
  exit_code = 0
  tests = 0
  failures = 0
  failed_tests = []
  start = Time.now
  
  p = IO.popen('xcodebuild -target "Unit Test" -configuration Debug -sdk iphonesimulator2.1', 'r')
  while line = p.gets
    if line =~ /Test Case/
      tests += 1
      if line.index('passed')
        pass('.')
      elsif line.index('failed')
        exit_code = 1
        if line =~ /'-\[(.*)\]'/
          failed_tests << $1
        end
        failures += 1
        fail('F')
      else
        print '.'
      end
      
    end
  end
  print "\n"
  puts "Finished in #{Time.now - start} seconds.\n\n"
  
  puts "#{tests} tests, #{failures} failures"

  if failures > 0
    puts "\nFailed tests:"
    failed_tests.each { |t| puts t }
    puts ""
  end
  
  exit exit_code
end

task :clean_targets do
  `xcodebuild -alltargets -configuration Release clean`
  `xcodebuild -alltargets -configuration Debug clean`

  FileList['./build/JoeMetric.build/Debug-iphonesimulator/Unit\ Test.build/Objects-normal/i386/*.o'].each do |file|
    FileUtils.rm_f(file)
  end
end

desc "Clean all targets"
task :clean => [:clean_targets] do
  puts "all targets cleaned"
end

desc "Run code coverage"
task :cruise => [:clean_targets] do
  FileList['./build/JoeMetric.build/Debug-iphonesimulator/Unit\ Test.build/Objects-normal/i386/*.gcda'].each do |file|
    FileUtils.rm_f(file)
  end
  
  FileList['./build/JoeMetric.build/Debug-iphonesimulator/Unit\ Test.build/Objects-normal/i386/*.gcno'].each do |file|
    FileUtils.rm_f(file)
  end


  output = `xcodebuild -target "Unit Test" -configuration Debug -sdk iphonesimulator2.1`
  built = true
  output.each do |line|
    if line =~ /(\d+) failures/
      if $1.to_i > 0
        built = false
      end
    end
  end
  
  if built
    FileList['./build/JoeMetric.build/Debug-iphonesimulator/Unit\ Test.build/Objects-normal/i386/*.gcda'].each do |file|
      next if File.basename(file) =~ /^GTM/
      next if File.basename(file) =~ /Test\.gcda$/

      
      sh "gcov -n -o build/JoeMetric.build/Debug-iphonesimulator/Unit\\ Test.build/Objects-normal/i386 Classes/#{File.basename(file).sub(/\.gcda$/, '.m')}"
    end
  else
    puts "Unit tests failed, run rake test to see why."
  end
end

task :default => [:test]

def pass(line)
  color(line, :green)
  return 0
end

def fail(line)
  color(line, :red)
  return 1
end

def color(output, color_type)
  print "#{send(color_type.to_s)}#{output}#{reset}".chomp
end

def red
  "\e[01;31m"
end

def green
  "\e[01;32m"
end

def reset
  "\e[00;m"
end
