COVERAGE_THRESHOLD = 72.0

task :ensure_dirs_exist do
  docs_dir = File.join('/Users', ENV['USER'], 'Library', 'Application Support', 'iPhone Simulator', 'User', 'Documents')
  
  if !File.exist?(docs_dir) || !File.stat(docs_dir).directory?
    FileUtils.rm_f(docs_dir)
    FileUtils.mkdir_p(docs_dir)
  end
end

desc "Run unit tests"
task :test => [:ensure_dirs_exist] do
  exit run_tests
end

task :test_raw do
  p = IO.popen('xcodebuild -target "Unit Test" -configuration Debug -sdk iphonesimulator2.1', 'r')
  while l = p.gets do
    puts l
  end
end

task :clean_targets do
  `xcodebuild -alltargets -configuration Release clean`
  `xcodebuild -alltargets -configuration Debug clean`

  FileList['./build/JoeMetric.build/Debug-iphonesimulator/Unit\ Test.build/Objects-normal/i386/*.o'].each do |file|
    FileUtils.rm_f(file)
  end
end

desc "Clean all targets"
task :clean => [:clean_targets] do
  puts "all targets cleaned"
end

desc "Run code coverage"
task :cruise => [:clean_targets, :ensure_dirs_exist] do
  FileList['./build/JoeMetric.build/Debug-iphonesimulator/Unit\ Test.build/Objects-normal/i386/*.gcda'].each do |file|
    FileUtils.rm_f(file)
  end
  
  FileList['./build/JoeMetric.build/Debug-iphonesimulator/Unit\ Test.build/Objects-normal/i386/*.gcno'].each do |file|
    FileUtils.rm_f(file)
  end

  if run_tests == 0
    require 'ocov'
    project = OCov::Project.new(File.dirname(__FILE__))
    project.analyze_and_report
    
    puts "Coverage: %.1f%% (threshold: %.1f%%)" % [project.total_coverage, COVERAGE_THRESHOLD]
    if project.total_coverage < COVERAGE_THRESHOLD
      puts "Coverage must be at least %.1f%% but was %.1f%%" % [COVERAGE_THRESHOLD, project.total_coverage]
      exit 1
    end
  else
    puts "Unit tests failed, coverage not run."
  end
end

task :default => [:test]


def run_tests
  exit_code = 0
  tests = 0
  failures = 0
  failed_tests = []
  start = Time.now

  previous_line = ''
  
  p = IO.popen('xcodebuild -target "Unit Test" -configuration Debug -sdk iphonesimulator2.1', 'r')
  while line = p.gets
    if line =~ /Test Case/
      tests += 1
      if line.index('passed')
        pass('.')
      elsif line.index('failed')
        exit_code = 1
        if line =~ /'-\[(.*)\]'/
          failed_tests << [$1, previous_line]
        end
        failures += 1
        fail('F')
      else
        print '.'
      end
    end
    previous_line = line
  end
  print "\n"
  puts "Finished in #{Time.now - start} seconds.\n\n"
  
  puts "#{tests} tests, #{failures} failures"

  if failures > 0
    puts "\nFailed tests:"
    failed_tests.each do |failure|
      puts failure[0]

      parts = failure[1].split(' ')
      error_output = parts[1..-1].join(' ').sub(File.dirname(parts[0]), '')
      
      puts "  #{File.basename(parts[0])} #{error_output}"
      puts ""
    end
  end

  exit_code
end

desc "Run the clang static analyzer on the classes files"
task :scan do
  Dir.glob("Classes/*.m").each do |m|
    scan m
  end
end

def pass(line)
  color(line, :green)
  return 0
end

def fail(line)
  color(line, :red)
  return 1
end

def color(output, color_type)
  print "#{send(color_type.to_s)}#{output}#{reset}".chomp
end

def red
  "\e[01;31m"
end

def green
  "\e[01;32m"
end

def reset
  "\e[00;m"
end

def scan(file)
  puts `scan-build gcc -g -c #{file}`
end
